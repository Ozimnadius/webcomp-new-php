//@prepros-append pages/common.js
//@prepros-append pages/index.js
//@prepros-append pages/site.js
//@prepros-append pages/promote.js
//@prepros-append pages/seo.js
//@prepros-append pages/smm.js
//@prepros-append pages/theme.js
//@prepros-append pages/reklama.js
//@prepros-append pages/portfolio.js
//@prepros-append pages/articles.js
//@prepros-append pages/map.js
//@prepros-append pages/test.js
//@prepros-append pages/aside.js
//@prepros-append pages/popup.js
//@prepros-append pages/validation.js
//@prepros-append pages/timer.js
//@prepros-append pages/clock.js
//@prepros-append pages/graph.js
//@prepros-append pages/banner-send.js
//@prepros-append pages/swiper.js







$.fn.hyphenate = function () {
    var all = "[абвгдеёжзийклмнопрстуфхцчшщъыьэюя]",
        glas = "[аеёиоуыэю\я]",
        sogl = "[бвгджзклмнпрстфхцчшщ]",
        zn = "[йъь]",
        shy = "\xAD",
        re = [];

    re[1] = new RegExp("(" + zn + ")(" + all + all + ")", "ig");
    re[2] = new RegExp("(" + glas + ")(" + glas + all + ")", "ig");
    re[3] = new RegExp("(" + glas + sogl + ")(" + sogl + glas + ")", "ig");
    re[4] = new RegExp("(" + sogl + glas + ")(" + sogl + glas + ")", "ig");
    re[5] = new RegExp("(" + glas + sogl + ")(" + sogl + sogl + glas + ")", "ig");
    re[6] = new RegExp("(" + glas + sogl + sogl + ")(" + sogl + sogl + glas + ")", "ig");
    return this.each(function () {
        var text = $(this).html();
        for (var i = 1; i < 7; ++i) {
            text = text.replace(re[i], "$1" + shy + "$2");
        }
        $(this).html(text);
    });
};

function getComputedTranslateY(obj) {
    if (!window.getComputedStyle) return;
    var style = getComputedStyle(obj),
        transform = style.transform || style.webkitTransform || style.mozTransform;
    var mat = transform.match(/^matrix3d\((.+)\)$/);
    if (mat) return parseFloat(mat[1].split(', ')[13]);
    mat = transform.match(/^matrix\((.+)\)$/);
    return mat ? parseFloat(mat[1].split(', ')[5]) : 0;
}

function getCssValuePrefix() {
    var rtrnVal = '';//default to standard syntax
    var prefixes = ['-o-', '-ms-', '-moz-', '-webkit-'];

    // Create a temporary DOM object for testing
    var dom = document.createElement('div');

    for (var i = 0; i < prefixes.length; i++) {
        // Attempt to set the style
        dom.style.background = prefixes[i] + 'linear-gradient(#000000, #ffffff)';

        // Detect if the style was successfully set
        if (dom.style.background) {
            rtrnVal = prefixes[i];
        }
    }

    dom = null;
    delete dom;

    return rtrnVal;
}

function GetNoun(number, one, two, five) {
    number = Math.abs(number);
    number %= 100;
    if (number >= 5 && number <= 20) {
        return five;
    }
    number %= 10;
    if (number == 1) {
        return one;
    }
    if (number >= 2 && number <= 4) {
        return two;
    }
    return five;
}

function index(list, item) {
    return Array.prototype.indexOf.call(list, item);
}

function Switches(prop) {
    this.sws = document.querySelector(prop.sws);
    this.width = this.sws.offsetWidth;
    this.swsList = document.querySelectorAll(prop.sw);
    this.line = document.querySelector(prop.line);
    this.tabs = document.querySelectorAll(prop.tab);
    this.tabSelector = prop.tab;
    this.autoWidth = prop.autoWidth || false;
    // this.scrollbar = prop.scrollbar || true;

    if (prop.switchActive === false) {
        this.switchActive = false
    } else {
        this.switchActive = true;
    }

    if (prop.scrollbar === false) {
        this.scrollbar = false;
    } else {
        this.scrollbar = true;
    }

    let that = this;

    this.init = function () {
        let $this = that.swsList[0],
            percent = ($this.offsetLeft / that.width) * 100,
            id = $this.dataset.id,
            tab = document.querySelector(that.tabSelector + '[data-id="' + id + '"]');


        for (let i = 0; i < that.swsList.length; i++) {
            that.swsList[i].classList.remove('active');
        }

        for (let i = 0; i < that.tabs.length; i++) {
            that.tabs[i].classList.remove('active');
        }

        tab.classList.add('active');
        $this.classList.add('active');

        if (that.scrollbar) {
            that.line.style.left = percent + '%';

            if (that.autoWidth) {
                let lineWidth = $this.offsetWidth + 'px';
                that.line.style.width = lineWidth;
            }
        }
    };

    for (let i = 0; i < that.swsList.length; i++) {
        that.swsList[i].addEventListener('click', function (e) {

            let percent = (this.offsetLeft / that.width) * 100,
                id = this.dataset.id,
                tab = document.querySelector(that.tabSelector + '[data-id="' + id + '"]');


            for (let i = 0; i < that.swsList.length; i++) {
                that.swsList[i].classList.remove('active');
            }

            for (let i = 0; i < that.tabs.length; i++) {
                that.tabs[i].classList.remove('active');
            }

            tab.classList.add('active');
            this.classList.add('active');

            if (that.scrollbar) {
                that.line.style.left = percent + '%';

                if (that.autoWidth) {
                    let lineWidth = this.offsetWidth + 'px';
                    that.line.style.width = lineWidth;
                }
            }

        });
    }
}

function NumberCounting(num, time) {
    this.number = num;
    this.val = this.number.querySelector('.number__val');
    this.from = parseInt(this.val.dataset.from);
    this.to = parseInt(this.val.dataset.to);
    this.time = time;
    let that = this;

    this.counting = function () {
        let i = that.from,
            to = (that.from < that.to) ? that.to : that.from,
            frame = that.time / to;

        let numInterval = setInterval(function (e) {

            if (i != that.to) {

                that.val.innerHTML = i;
                if (that.from < that.to) {
                    i++;
                } else {
                    i--;
                }
            } else {
                that.val.innerHTML = i;
                clearInterval(numInterval);
            }

        }, frame)

    };
    this.clear = function () {
        this.val.innerHTML = this.from;
    }
}

function NumbersCounting(object, settings) {
    this.numbers = object;
    this.itemClass = settings.item || '.number';
    this.time = this.numbers.dataset.timer || '2000';
    this.parent = this.numbers.parentNode.parentNode;
    this.graphImg1 = this.parent.querySelector('.promote-result__graph-img1');
    this.graphImg2 = this.parent.querySelector('.promote-result__graph-img2');
    let that = this;

    this.animateNumbers = function () {
        let numbers = this.numbers,
            numberAll = numbers.querySelectorAll(this.itemClass);

        for (let i = 0; i < numberAll.length; i++) {
            let number = numberAll[i];

            if (number.classList.contains('active')) {
                continue;
            }

            number.classList.add('active');
            let numberObj = new NumberCounting(number, this.time).counting();

            if (this.graphImg1) {
                this.graphImg1.classList.add('active');
            }
            if (this.graphImg2) {
                this.graphImg2.classList.add('active');
            }

        }
    };
    this.clearValues = function () {
        let numbers = this.numbers,
            numberAll = numbers.querySelectorAll(this.itemClass);


        for (let i = 0; i < numberAll.length; i++) {
            let number = numberAll[i];

            number.classList.remove('active');
            let numberObj = new NumberCounting(number, this.time).clear();

            if (this.graphImg1) {
                this.graphImg1.classList.remove('active');
            }
            if (this.graphImg2) {
                this.graphImg2.classList.remove('active');
            }
        }
    }

}

function ScrollTo(object, f) {
    this.isScrolling = false;
    this.object = object;
    let that = this;
    let callback = f || function () {
    };

    window.addEventListener('scroll', throttleScroll, false);

    this.scrolling = function () {
        if (that.isFullyVisible(that.object)) {
            callback();
        }
    };

    function throttleScroll(e) {
        if (that.isScrolling == false) {
            window.requestAnimationFrame(function () {
                that.scrolling();
                that.isScrolling = false;
            });
        }
        that.isScrolling = true;
    }

    this.isFullyVisible = function () {
        var elementBoundary = that.object.getBoundingClientRect();

        var top = elementBoundary.top;
        var bottom = elementBoundary.bottom;

        return ((top >= 0) && (bottom <= window.innerHeight));
    };
    this.isPartiallyVisible = function () {
        var elementBoundary = that.object.getBoundingClientRect();

        var top = elementBoundary.top;
        var bottom = elementBoundary.bottom;
        var height = elementBoundary.height;

        return ((top + height >= 0) && (height + window.innerHeight >= bottom));
    };


}

function Graphs(graphs) {
    this.graphs = graphs;

    this.animate = function () {
        for (let key in this.graphs) {
            let graph = this.graphs[key];
            graph.classList.add('active');
        }
    };
    this.clear = function () {
        for (let key in this.graphs) {
            let graph = this.graphs[key];
            graph.classList.remove('active');
        }
    };
}

window.addEventListener("mousewheel", function(e) {

    if (e.ctrlKey) {
        e.preventDefault();
        return false;
    }
});

let numbersAll = document.querySelectorAll('.numbers');

if (numbersAll.length) {
    for (let i = 0; i < numbersAll.length; i++) {
        let numbers = numbersAll[i];
        let numbersObj = new NumbersCounting(numbers, {
            item: '.number'
        });
        let scroll = new ScrollTo(numbers, function () {
            numbersObj.animateNumbers();
        }).scrolling();
    }
}

let clocks = document.querySelectorAll('.clock');

if (clocks.length) {
    for (let i = 0; i < clocks.length; i++) {
        let clock = clocks[i],
            clockHour = clock.querySelector('.clock__hour'),
            clockMinute = clock.querySelector('.clock__minute'),
            clockSecond = clock.querySelector('.clock__second'),
            clockObj = new Clock({
                hourObj: clockHour,
                minuteObj: clockMinute,
                secondObj: clockSecond
            });
        clockObj.start();
    }
}

let graph = document.querySelector('.graph__chart'),
    list = document.querySelectorAll('.site-dev__item');

if (graph) {
    let newGraph = new Graph({
            graph: graph,
            list: list
        }),
        listObj = document.querySelector('.site-dev__list'),
        scroll = new ScrollTo(graph, function () {
            newGraph.init();
        }).scrolling();
}

let figure = document.querySelector('.figure');

if (figure) {
    let scroll = new ScrollTo(figure, function () {
        figure.classList.add('active');
    }).scrolling();

}

let aside = document.querySelector('.aside'),
    asideOpen = aside.querySelector('.aside__burger');

if (aside){
    asideOpen.addEventListener('click', function (e) {
        e.preventDefault();
        if (this.classList.contains('active')){
            aside.classList.remove('active');
            this.classList.remove('active');
            // scrollLock.enablePageScroll(document.body);
        }  else {
            aside.classList.add('active');
            this.classList.add('active');
            // scrollLock.disablePageScroll(document.body);
        }
    })
}

$('select').selectize();

$('input[type=tel]').mask('+7 (999) 999-99-99');




(function () {

    let pagItems = document.querySelector('.pag__items'),
        pagAllItem = document.querySelectorAll('.pag__item'),
        sections = document.querySelectorAll('section'),
        mainContent = document.querySelector('.main'),
        inScroll = false,
        figure = document.querySelector('.figure'),
        sectionBottom = document.querySelector('.index-bottom'),
        scrollTop = 0,
        page = document.querySelector('.page'),
        pagination = document.querySelector('.pag'),
        nextSectionBtn = document.querySelector('.nextSection'),
        historySection = localStorage.getItem('sectionIndex'),
        historyPage = localStorage.getItem('page'),
        bestPercents = document.querySelector('.best__percents');

    if (bestPercents) {
        let numbers = bestPercents.querySelector('.numbers');
        let numbersObj = new NumbersCounting(numbers, {
            item: '.number'
        });
        let bestImg = bestPercents.querySelector('.best__img');
        let scroll = new ScrollTo(numbers, function () {
            bestImg.classList.add('active');
            numbersObj.animateNumbers();
        }).scrolling();
    }


    // простенькая история, чтоб не скролить до определенной секции
    if (historySection && !page.classList.contains('page_second') && document.querySelector('.' + historyPage) && screen.width >= 1400) {
        scrollToSection(localStorage.getItem('sectionIndex'));
    }


    //one-page-scroll до нужной секции
    function scrollToSection(sectionIndex) {
        let position = sectionIndex * -100 + 'vh',
            section = sections[sectionIndex],
            translateY = (sectionIndex) * -102;

        for (let i = 0; i < pagAllItem.length; i++) {
            pagAllItem[i].classList.remove('active');
        }

        for (let i = 0; i < sections.length; i++) {
            sections[i].classList.remove('active-page');
        }

        if (pagItems) {
            pagAllItem[sectionIndex].classList.add('active');
            pagItems.style.transform = 'translate3d(0,' + translateY + 'px,0)';
        }

        section.classList.add('active-page');
        mainContent.style.transform = 'translate3d(0,' + position + ',0)';


        if (figure) {
            if (section.classList.contains('index-about')) {
                setTimeout(function () {
                    figure.classList.add('active');
                }, 1000);

            } else {
                figure.classList.remove('active');
            }
        }

        if (section.classList.contains('comp-rew')) {
            let numbers = document.querySelector('.comp-rew .numbers');
            let numbersObj = new NumbersCounting(numbers, {
                item: '.number'
            });
            numbersObj.animateNumbers();
        }

        if (pagItems) {
            if (sectionIndex == 3) {
                document.querySelector('.pag__arrow-line').style.opacity = 0;
            } else {
                document.querySelector('.pag__arrow-line').style.opacity = 1;
            }

            if (section.classList.contains('index-bottom')) {
                pagination.classList.add('hidden');
            } else {
                pagination.classList.remove('hidden');
            }
        }

        let bestPercents = section.querySelector('.best__percents');

        if (bestPercents) {
            let numbers = bestPercents.querySelector('.numbers');
            let numbersObj = new NumbersCounting(numbers, {
                item: '.number'
            });
            let bestImg = bestPercents.querySelector('.best__img');
            bestImg.classList.add('active');
            numbersObj.animateNumbers();
        }


        localStorage.setItem('sectionIndex', sectionIndex);
        localStorage.setItem('page', mainContent.firstElementChild.className);

        setTimeout(function () {
            inScroll = false;
        }, 1300);

    }

    //если нет класса page_second значит есть one-page-scroll
    if (!page.classList.contains('page_second') && screen.width >= 1440) {


        //если есть пагинация вешаем клик на пагинацию
        if (pagItems) {
            pagItems.addEventListener('click', function (e) {
                if (e.target.classList.contains('pag__item')) {
                    e.preventDefault();
                    scrollToSection(index(pagAllItem, e.target));
                }
            });
        }


        if (sections.length > 1) {
            //вешаем на прокрутку one-page-scroll
            document.addEventListener('wheel', function (e) {

                let deltaY = e.deltaY,
                    activeSection = document.querySelector('.active-page'),
                    nextSection = activeSection.nextElementSibling,
                    prevSection = activeSection.previousElementSibling;

                if (!activeSection.classList.contains('index-bottom')) {
                    e.preventDefault();
                } else {
                    if (deltaY > 0) {
                        return;
                    } else {
                        if (scrollTop > 0) {
                            return;
                        }
                    }

                }

                if (inScroll) return;

                inScroll = true;



                if (deltaY > 0) {
                    if (nextSection) {
                        scrollToSection(index(sections, nextSection));
                    } else {
                        inScroll = false;
                    }
                } else {
                    if (prevSection) {
                        scrollToSection(index(sections, prevSection));
                    } else {
                        inScroll = false;
                    }
                }

            });

            document.addEventListener('keydown', function (e) {


                let deltaY = e.deltaY,
                    activeSection = document.querySelector('.active-page'),
                    nextSection = activeSection.nextElementSibling,
                    prevSection = activeSection.previousElementSibling;

                if (!(e.keyCode === 38 || e.keyCode === 40)) return;

                if ($(e.target).is('input')) return;

                if (!activeSection.classList.contains('index-bottom')) {
                    e.preventDefault();
                } else {
                    if (deltaY > 0) {
                        return;
                    } else {
                        if (scrollTop > 0) {
                            return;
                        }
                    }

                }


                if (e.keyCode == '40') {
                    if (nextSection) {
                        scrollToSection(index(sections, nextSection));
                    } else {
                        inScroll = false;
                    }
                } else if (e.keyCode == '38') {
                    if (prevSection) {
                        scrollToSection(index(sections, prevSection));
                    } else {
                        inScroll = false;
                    }
                }

            });

            if (sectionBottom) {
                sectionBottom.addEventListener('scroll', function (e) {
                    scrollTop = this.scrollTop;
                });
            }
        }
    }

    if (nextSectionBtn) {
        nextSectionBtn.addEventListener('click', function (e) {
            if (screen.width >= 1400) {
                e.preventDefault();
                let index = this.dataset.id;
                scrollToSection(index);
            }
        })
    }

    $('.index-about__content').hyphenate();


    let range = document.querySelector('.calc__range');
    if (range) {
        range.addEventListener('input', function () {

            let max = this.max,
                percents = (this.value/max)*100,
                rangeVal = document.querySelector('.calc__range-val'),
                rangeTitle = document.querySelector('.calc__range-text');

            rangeVal.innerHTML = this.value;
            rangeTitle.innerHTML = ' ' + GetNoun(this.value, 'неделя', 'недели', 'недель');
            this.style.backgroundImage = getCssValuePrefix() + 'linear-gradient(left ,#ffba00 0%,#ffba00 ' + percents + '%, #352b4d ' + percents + '%, #352b4d 100%)';

        });
    }


    let switchButton = document.querySelector('.best__switch-button'),
        switches = document.querySelectorAll('.best__switch'),
        tabs = document.querySelectorAll('.best__tab');
    if (switchButton) {
        switchButton.addEventListener('click', function (e) {

            let nextSwitch = '';
            for (let i = 0; i < switches.length; i++) {
                if (!switches[i].classList.contains('active')) {
                    nextSwitch = switches[i];
                }
            }

            let id = nextSwitch.dataset.id,
                activeTab = document.querySelector('.best__tab[data-id="' + id + '"]');

            //Toggle switces
            for (let i = 0; i < switches.length; i++) {
                switches[i].classList.remove('active');
            }
            nextSwitch.classList.add('active');

            //Toggle tabs
            for (let i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove('active');
            }
            activeTab.classList.add('active');

            //Toggle button
            this.classList.toggle('right');

        });

        for (let i = 0; i < switches.length; i++) {
            switches[i].addEventListener('click', function (e) {
                let id = this.dataset.id,
                    activeTab = document.querySelector('.best__tab[data-id="' + id + '"]');

                //Toggle switces
                for (let i = 0; i < switches.length; i++) {
                    switches[i].classList.remove('active');
                }
                this.classList.add('active');

                //Toggle tabs
                for (let i = 0; i < tabs.length; i++) {
                    tabs[i].classList.remove('active');
                }
                activeTab.classList.add('active');

                //Toggle button
                switchButton.classList.toggle('right');
            });
        }
    }


    let calcForm = document.querySelector('.calc');
    if (calcForm) {

    }

}());
(function () {
    let costSwithes = document.querySelector('.site-cost__switches-list');
    if (costSwithes) {

        let switches = new Switches({
            sws: '.site-cost__switches-list',
            sw: '.site-cost__switch',
            line: '.site-cost__subline',
            tab: '.site-cost__tab',
            switchActive: false
        });
    }

    let formNextAll = document.querySelectorAll('.site-cost .form__button');
    if (formNextAll) {
        for (let i = 0; i < formNextAll.length; i++) {
            formNextAll[i].addEventListener('click', function (e) {
                document.querySelector('.site-cost__switch.active').nextElementSibling.click();
            });
        }

    }

    let siteCostTabs = document.querySelector('.site-cost__tabs');
    if (siteCostTabs) {
        let tabs = siteCostTabs.querySelectorAll('.site-cost__tab'),
            maxHeight = 0;

        for (let i = 0; i < tabs.length; i++) {
            let tab = tabs[i],
                wrap = tab.querySelector('.form__wrapper'),
                height = wrap.offsetHeight;


            if (maxHeight < height) {
                maxHeight = height;
            }
        }

        for (let i = 0; i < tabs.length; i++) {
            tabs[i].style.height = maxHeight + 'px';

        }

        siteCostTabs.style.height = maxHeight + 'px';
    }

}());
(function () {

    let promoteFormOpen= document.querySelector('.promote-first__button'),
        promoteFirst = document.querySelector('.promote-first__wrapper'),
        promoteCalc = document.querySelector('.promote-first__calc');
    if (promoteFormOpen) {
        promoteFormOpen.addEventListener('click', function (e) {
            promoteFirst.classList.add('disabled');
            promoteCalc.classList.add('active');
            // scrollLock.disablePageScroll(document.body);
        });
    }
    let promoteFormClose = document.querySelector('.promote-calc__close')
    if (promoteFormClose) {
        promoteFormClose.addEventListener('click', function (e) {
            promoteFirst.classList.remove('disabled');
            promoteCalc.classList.remove('active');
            // scrollLock.enablePageScroll(document.body);
        });
    }

}());
(function () {
    let costSwithes = document.querySelector('.seo-price__switches-list');
    if (costSwithes) {

        let switches = new Switches({
            sws: '.seo-price__switches-list',
            sw: '.seo-price__switch',
            line: '.seo-price__subline',
            tab: '.seo-price__tab',
            autoWidth: true
        }).init();
    }

    let acco = document.querySelector('.seo-faq__acco'),
        accoItems = document.querySelectorAll('.seo-faq__item');

    if (acco) {
        acco.addEventListener('click', function (e) {
            let target = e.target;

            if (target.classList.contains('seo-faq__item-title')) {

                let item = target.parentNode,
                    itemWrap = item.querySelector('.seo-faq__item-wrap'),
                    itemContent = item.querySelector('.seo-faq__item-desc'),
                    height = itemContent.offsetHeight+'px';


                for (let i = 0; i < accoItems.length; i++) {
                    if (accoItems[i] != item) {
                        accoItems[i].querySelector('.seo-faq__item-wrap').style.height = '';
                    }
                }

                if (!itemWrap.style.height) {
                    itemWrap.style.height = height;
                } else {
                    itemWrap.style.height = '';
                }
            }

        });
    }
}());
(function () {
    let sws = document.querySelector('.smm-str__sws-list');
    if (sws) {

        let switches = new Switches({
            sws: '.smm-str__sws-list',
            sw: '.smm-str__sw',
            tab: '.smm-str__tab',
            scrollbar: false
        }).init();
    }

    $('.scrollTo').on('click', function (e) {
        e.preventDefault();

        let form = $($(this).attr('href'));

        $('html, body').animate({
            scrollTop: form.offset().top
        }, 400);

    });

    let smmCanvas = document.querySelector('.smm-res__canvas');
    if (smmCanvas) {
        var w = c.width = window.innerWidth,
            h = c.height = window.innerHeight,
            ctx = c.getContext('2d'),
            opts = {
                len: 20,
                count: 50,
                baseTime: 10,
                addedTime: 10,
                dieChance: .05,
                spawnChance: 1,
                sparkChance: .1,
                sparkDist: 10,
                sparkSize: 2,

                color: 'hsl(hue,100%,light%)',
                baseLight: 50,
                addedLight: 10, // [50-10,50+10]
                shadowToTimePropMult: 6,
                baseLightInputMultiplier: .01,
                addedLightInputMultiplier: .02,

                cx: w / 2,
                cy: h / 2,
                repaintAlpha: .04,
                hueChange: .1
            },
            tick = 0,
            lines = [],
            dieX = w / 2 / opts.len,
            dieY = h / 2 / opts.len,
            baseRad = Math.PI * 2 / 6;

        ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, w, h);

        function loop() {

            window.requestAnimationFrame(loop);

            ++tick;

            ctx.globalCompositeOperation = 'source-over';
            ctx.shadowBlur = 0;
            ctx.fillStyle = 'rgba(0,0,0,alp)'.replace('alp', opts.repaintAlpha);
            ctx.fillRect(0, 0, w, h);
            ctx.globalCompositeOperation = 'lighter';

            if (lines.length < opts.count && Math.random() < opts.spawnChance)
                lines.push(new Line);

            lines.map(function (line) {
                line.step();
            });
        }

        function Line() {

            this.reset();
        }

        Line.prototype.reset = function () {

            this.x = 0;
            this.y = 0;
            this.addedX = 0;
            this.addedY = 0;

            this.rad = 0;

            this.lightInputMultiplier = opts.baseLightInputMultiplier + opts.addedLightInputMultiplier * Math.random();

            this.color = opts.color.replace('hue', tick * opts.hueChange);
            this.cumulativeTime = 0;

            this.beginPhase();
        }
        Line.prototype.beginPhase = function () {

            this.x += this.addedX;
            this.y += this.addedY;

            this.time = 0;
            this.targetTime = (opts.baseTime + opts.addedTime * Math.random()) | 0;

            this.rad += baseRad * (Math.random() < .5 ? 1 : -1);
            this.addedX = Math.cos(this.rad);
            this.addedY = Math.sin(this.rad);

            if (Math.random() < opts.dieChance || this.x > dieX || this.x < -dieX || this.y > dieY || this.y < -dieY)
                this.reset();
        }
        Line.prototype.step = function () {

            ++this.time;
            ++this.cumulativeTime;

            if (this.time >= this.targetTime)
                this.beginPhase();

            var prop = this.time / this.targetTime,
                wave = Math.sin(prop * Math.PI / 2),
                x = this.addedX * wave,
                y = this.addedY * wave;

            ctx.shadowBlur = prop * opts.shadowToTimePropMult;
            ctx.fillStyle = ctx.shadowColor = this.color.replace('light', opts.baseLight + opts.addedLight * Math.sin(this.cumulativeTime * this.lightInputMultiplier));
            ctx.fillRect(opts.cx + (this.x + x) * opts.len, opts.cy + (this.y + y) * opts.len, 2, 2);

            if (Math.random() < opts.sparkChance)
                ctx.fillRect(opts.cx + (this.x + x) * opts.len + Math.random() * opts.sparkDist * (Math.random() < .5 ? 1 : -1) - opts.sparkSize / 2, opts.cy + (this.y + y) * opts.len + Math.random() * opts.sparkDist * (Math.random() < .5 ? 1 : -1) - opts.sparkSize / 2, opts.sparkSize, opts.sparkSize)
        }
        loop();

        window.addEventListener('resize', function () {

            w = c.width = window.innerWidth;
            h = c.height = window.innerHeight;
            ctx.fillStyle = 'black';
            ctx.fillRect(0, 0, w, h);

            opts.cx = w / 2;
            opts.cy = h / 2;

            dieX = w / 2 / opts.len;
            dieY = h / 2 / opts.len;
        });
    }

    let smmTabs = document.querySelector('.smm-str__tabs');

    if (smmTabs) {
        let smmTabAll = smmTabs.querySelectorAll('.smm-str__tab'),
            maxHeight = 0;

        for (let i = 0; i < smmTabAll.length; i++) {
            let tab = smmTabAll[i],
                wrap = tab.querySelector('.smm-str__tab-wrap'),
                height = wrap.offsetHeight;
            // debugger;

            if (maxHeight < height) {
                maxHeight = height;
            }
        }
        // console.log(maxHeight);
        smmTabs.style.height = maxHeight + 'px';
        // for (let i = 0; i < smmTabAll.length; i++) {
        //     smmTabAll[i].style.height = maxHeight + 'px';
        // }

    }

}());
(function () {
    let costSwithes = document.querySelector('.theme-price__switches-list');
    if (costSwithes) {

        let switches = new Switches({
            sws: '.theme-price__switches-list',
            sw: '.theme-price__switch',
            line: '.theme-price__subline',
            tab: '.theme-price__tab',
            autoWidth: true
        }).init();
    }

}());
(function () {
    let costSwithes = document.querySelector('.rek-price__switches-list');
    if (costSwithes) {

        let switches = new Switches({
            sws: '.rek-price__switches-list',
            sw: '.rek-price__switch',
            line: '.rek-price__subline',
            tab: '.rek-price__tab',
            autoWidth: true
        }).init();
    }

    let checboxes = document.querySelectorAll('.rek-bud__check-input');
    if (checboxes.length) {
        let numbers = document.querySelector('.rek-bud__list'),
            numberAll = numbers.querySelectorAll('.number'),
            time = numbers.dataset.timer;

        for (let i = 0; i < checboxes.length; i++) {
            let input = checboxes[i];

            input.addEventListener('change', function (e) {
                let checked = this.checked,
                    number = numberAll[parseInt(this.dataset.number)],
                    numberObj = new NumberCounting(number, time);



                if (checked) {
                    numberObj.counting();
                } else {
                    numberObj.clear();
                }
            });
        }
    }


}());
(function () {
    let dragObject = {},
        item = document.querySelector('.port-lap__drug.draggable');

    if (item) {

        let width = document.querySelector('.port-lap__container').offsetWidth;

        item.addEventListener('touchstart', function (e) {

            let elem = e.target.closest('.draggable');
            // запомнить переносимый объект
            dragObject.elem = elem;

            // запомнить координаты, с которых начат перенос объекта
            dragObject.downX = e.touches[0].pageX;
        });

        document.addEventListener('touchmove', function (e) {


            if (!dragObject.elem) return; // элемент не зажат

            // посчитать дистанцию, на которую переместился курсор мыши
            let moveX = e.touches[0].pageX - dragObject.downX;
            dragObject.downX = e.touches[0].pageX;

            if (Math.abs(moveX) < 3) {
                return; // ничего не делать, мышь не передвинулась достаточно далеко
            }

            let offsetLeft = dragObject.elem.offsetLeft + 31.15 + moveX;

            dragObject.avatar = document.querySelector('.port-lap__before'); // захватить элемент

            let percent = 100 - ((offsetLeft / width) * 100);
            if (percent < 0) return;

            console.log(percent);

            // отобразить перенос объекта при каждом движении мыши
            dragObject.avatar.style.right = percent + '%';

        });

        document.addEventListener('touchend', function (e) {

            dragObject = {
                elem: null,
                avatar: null
            };
        });

        item.onmousedown = function (e) {

            let elem = e.target.closest('.draggable');
            // запомнить переносимый объект
            dragObject.elem = elem;

            // запомнить координаты, с которых начат перенос объекта
            dragObject.downX = e.pageX;
        };


        document.onmousemove = function (e) {


            if (!dragObject.elem) return; // элемент не зажат

            // посчитать дистанцию, на которую переместился курсор мыши
            let moveX = e.pageX - dragObject.downX;
            dragObject.downX = e.pageX;

            if (Math.abs(moveX) < 3) {
                return; // ничего не делать, мышь не передвинулась достаточно далеко
            }

            let offsetLeft = dragObject.elem.offsetLeft + 31.15 + moveX;

            dragObject.avatar = document.querySelector('.port-lap__before'); // захватить элемент

            let percent = 100 - ((offsetLeft / width) * 100);
            if (percent < 0) return;

            console.log(percent);

            // отобразить перенос объекта при каждом движении мыши
            dragObject.avatar.style.right = percent + '%';

        };

        document.onmouseup = function (e) {

            dragObject = {
                elem: null,
                avatar: null
            };
        }
    }

    let blacksmithButtons = document.querySelectorAll('.blacksmith__button'),
        projectImage = document.querySelector('.port-proj__img-img');

    if (blacksmithButtons) {
        for (let i = 0; i < blacksmithButtons.length; i++) {
            blacksmithButtons[i].addEventListener('click', function (e) {
                let src = this.dataset.src;

                for (let j=0; j<blacksmithButtons.length; j++) {
                    blacksmithButtons[j].classList.remove('active');
                }

                projectImage.src = src;
                this.classList.add('active');
            });
        }
    }

}());
(function () {

    // const button = document.querySelector('.articles__more'),
    //     hidden = document.querySelector('.articles__hidden'),
    //     hiddenLIst = hidden.querySelector('.articles__list'),
    //     height = hiddenLIst.offsetHeight;
    //
    // button.addEventListener('click', function (e) {
    //    e.preventDefault();
    //
    //    hidden.style.height = height+'px';
    // });


}());
(function () {

    const button = document.querySelector('.conts-map__button'),
        close = document.querySelector('.conts-map__close'),
        map = document.querySelector('.conts-map__map');

    if (button) {
        button.addEventListener('click', function (e) {
            e.preventDefault();
            map.classList.toggle('open');
        });
        close.addEventListener('click', function (e) {
            e.preventDefault();
            map.classList.remove('open');
        });
    }


}());
(function () {
    let startButton = document.querySelector('.testing-start__button'),
    startLayer = document.querySelector('.testing-start'),
    formLayer = document.querySelector('.testing-slider');

    if (startButton) {
        startButton.addEventListener('click', function (e) {
            document.querySelector('.testing').classList.add('active');
            startLayer.classList.remove('active');
            formLayer.classList.add('active');
        })
    }

}());
(function () {
    const searchBtn = document.querySelector('.search__btn'),
        searchField = document.querySelector('.search__field'),
        searchForm = document.querySelector('.search');

    if (searchBtn) {
        searchBtn.addEventListener('click', function (e) {
            e.preventDefault();
            searchField.classList.toggle('active');
            document.querySelector('.autocomplete').classList.remove('active');
        });
    }

    const searchInput = document.querySelector('.search__input'),
        autocomplite = document.querySelector('.autocomplete');

    if (searchInput) {

        searchInput.addEventListener('input', function (e) {

            if (this.value.length > 1) {

                let data = {
                    string: this.value,
                    action: 'autocomplete'
                };

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: '/php/ajax.php',
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            autocomplite.innerHTML = '';
                            autocomplite.appendChild(createAutocompleteList(result.data));
                            autocomplite.classList.add('active');
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });

            }
        });

        searchInput.addEventListener('keydown', function (e) {

            let list = document.querySelector('.autocomplete__list'),
                items = document.querySelectorAll('.autocomplete__item'),
                activeItem = document.querySelector('.autocomplete__item.active'),
                nextItem = '',
                prevItem = '';

            // debugger;

            if (!activeItem) {
                nextItem = document.querySelector('.autocomplete__item'),
                    prevItem = items[items.length - 1];
            } else {
                if (activeItem.nextElementSibling) {
                    nextItem = activeItem.nextElementSibling;
                } else {
                    nextItem = document.querySelector('.autocomplete__item');
                }
                if (activeItem.previousElementSibling) {
                    prevItem = activeItem.previousElementSibling;
                } else {
                    prevItem = items[items.length - 1];
                }
            }


            if (e.keyCode == 40) { //arrow down
                clearListActive(items);
                nextItem.classList.add('active');
                searchInput.value = nextItem.innerHTML;
            } else if (e.keyCode == 38) { //arrow up
                clearListActive(items);
                prevItem.classList.add('active');
                searchInput.value = prevItem.innerHTML;
            }

        })

    }

    function clearListActive(list) {
        for (let i = 0; i < list.length; i++) {
            list[i].classList.remove('active');
        }
    }

    function createAutocompleteItem(text) {
        let item = document.createElement('li');
        item.classList.add('autocomplete__item');
        item.innerText = text;

        item.addEventListener('click', function (e) {
            searchInput.value = text;
            searchForm.submit();
        });

        return item;
    }

    function createAutocompleteList(data) {
        let list = document.createElement('ul');
        list.classList.add('autocomplete__list');

        for (let i = 0; i < data.length; i++) {
            list.appendChild(createAutocompleteItem(data[i]));
        }

        return list;
    }

}());
// (function () {

const popup = document.querySelector('.popup'),
    popupClose = document.querySelector('.popup__close'),
    popupWrapper = popup.querySelector('.popup__wrapper'),
    callorderOpenAll = document.querySelectorAll('.callorderOpen'),
    promotionOpenAll = document.querySelectorAll('.promotionOpen'),
    pushOpenAll = document.querySelectorAll('.pushOpen');

const formFields = {
        '1': [
            [
                {
                    fieldClass: 'form__field',
                    tag: 'input',
                    tagClass: 'input',
                    type: 'text',
                    name: 'name',
                    placeholder: 'Имя'
                },
                {
                    fieldClass: 'form__field',
                    tag: 'input',
                    tagClass: 'input',
                    type: 'tel',
                    name: 'tel',
                    placeholder: 'Телефон'
                },
                {
                    fieldClass: 'form__field',
                    tag: 'input',
                    tagClass: 'input',
                    type: 'email',
                    name: 'email',
                    placeholder: 'E-mail'
                }],
            [
                {
                    fieldClass: 'form__field form__field_3',
                    tag: 'textarea',
                    tagClass: 'input input_area',
                    name: 'description',
                    placeholder: 'Напишите свой вопрос'
                }
            ]
        ]
    },
    formParams = {
        '1': {
            title: 'Закажите сайт',
            subtitle: 'Мы ответим на все интересующие вас вопросы',
            btntitle: 'Получить консультацию',
            fields: formFields['1']
        },
        '2': {
            title: 'Закажите продвижение',
            subtitle: 'Мы ответим на все интересующие вас вопросы',
            btntitle: 'Получить консультацию маркетолога',
            fields: formFields['1']
        },
        '3': {
            title: 'Откликнуться на вакансию',
            subtitle: 'Хотите стать частью команды?',
            btntitle: 'Откликнуться',
            fields: formFields['1']
        },
        '4': {
            title: 'Получить прогноз по бюджету',
            subtitle: 'Произведем индивидуальный расчет с учетом ваших пожеланий',
            btntitle: 'Рассчитать стоимость',
            fields: formFields['1']
        },
        '5': {
            title: 'Закажите звонок',
            subtitle: 'Мы ответим на все интересующие вас вопросы',
            btntitle: 'Получить консультацию',
            fields: formFields['1']
        },
        '6': {
            title: 'Узнаете стоимость продвижения',
            subtitle: 'Мы ответим на все интересующие вас вопросы',
            btntitle: 'Получить консультацию',
            fields: formFields['1']
        },
        '7': {
            title: 'Полный маркетинговый аудит',
            subtitle: 'Мы предоставим полную информацию для развития вашего проекта в интернете',
            btntitle: 'Заказать аудит',
            fields: formFields['1']
        },
        '8': {
            title: 'Ответим на ваши вопросы',
            subtitle: 'Предоставим развернутый ответ на интересующие Вас вопросы',
            btntitle: 'Отправить',
            fields: formFields['1']
        },
        '9': {
            title: 'Обсудить условия',
            subtitle: 'Мы ответим на все интересующие вас вопросы',
            btntitle: 'Получить консультацию',
            fields: formFields['1']
        },
        '10': {
            title: 'Узнать стоимость',
            subtitle: 'Мы ответим на все интересующие вас вопросы',
            btntitle: 'Получить консультацию',
            fields: formFields['1']
        }
    }
    formTemplate = $('.callorderTemplate').find('.callorder');

function generateForm(formId, themeText) {
    let params = formParams[formId],
        form = formTemplate.clone(),
        title = form.find('.callorder__title'),
        subtitle = form.find('.callorder__subtitle'),
        btntitle = form.find('.btn__title'),
        theme = form.find('input[name=theme]'),
        fields = form.find('.form__fields'),
        fieldsArr = params.fields;

    title.text(params.title);
    subtitle.text(params.subtitle);
    btntitle.text(params.btntitle);
    if (themeText){
        theme.val(themeText);
    } else {
        theme.val(params.title);
    }

    fieldsArr.forEach(function (i) {
        let row = $('<div>').addClass('form__row');

        i.forEach(function (item) {
            let field = $('<div>').addClass(item.fieldClass),
                element = $('<' + item.tag + '>').addClass(item.tagClass).attr('name', item.name).attr('placeholder', item.placeholder);

            if (item.type) {
                element.attr('type', item.type);
            }
            field.append(element);
            row.append(field);
        });


        fields.append(row);
    });


    return form;
}

if (callorderOpenAll) {
    for (let i = 0; i < callorderOpenAll.length; i++) {
        let callorderOpen = callorderOpenAll[i];

        callorderOpen.addEventListener('click', function (e) {

            let formId = this.dataset.formid || 1,
                theme = this.dataset.theme || '',
                data = {
                    action: 'callorderForm',
                    formId: formId,
                    theme: theme
                },
                html = generateForm(formId);

            $(popupWrapper).html(html);
            $('input[type=tel]').mask('+7 (999) 999-99-99');
            $(popup).addClass('active').find('.callorder .form').validate(
                {
                    rules: {
                        name: "required",
                        tel: "required",
                        email: "required"
                    },
                    messages: {
                        name: "Введите ваше Имя",
                        tel: "Введите ваш  Телефон",
                        email: "Введите ваш Email"
                    },

                    submitHandler: function (form) {
                        sendCallorderData(form);
                    },
                    invalidHandler: function (event, validator) {
                        // debugger;
                    },
                    errorPlacement: function (error, element) {
                        element[0].placeholder = error[0].innerText;
                    }
                }
            );


            // $.ajax({
            //     dataType: "json",
            //     type: "POST",
            //     url: '/php/ajax.php',
            //     data: data,
            //     success: function (result) {
            //         if (result.status) {
            //
            //             popupWrapper.innerHTML = result.html;
            //             popup.classList.add('active');
            //             // scrollLock.disablePageScroll(document.body);
            //             $(document.querySelector('.callorder .form')).validate(
            //                 {
            //                     rules: {
            //                         name: "required",
            //                         tel: "required",
            //                         email: "required"
            //                     },
            //                     messages: {
            //                         name: "Введите ваше Имя",
            //                         tel: "Введите ваш  Телефон",
            //                         email: "Введите ваш Email"
            //                     },
            //
            //                     submitHandler: function (form) {
            //                         sendCallorderData(form);
            //                     },
            //                     invalidHandler: function (event, validator) {
            //                         // debugger;
            //                     },
            //                     errorPlacement: function (error, element) {
            //                         element[0].placeholder = error[0].innerText;
            //                     }
            //                 }
            //             );
            //
            //         } else {
            //             alert('Что-то пошло не так, попробуйте еще раз!!!');
            //         }
            //     },
            //     error: function (result) {
            //         alert('Что-то пошло не так, попробуйте еще раз!!!');
            //     }
            // });
        });
    }
}

function sendCallorderData(form) {
    let data = $(form).serialize();

    $.ajax({
        dataType: "json",
        type: "POST",
        url: '/php/ajax.php',
        data: data,
        success: function (result) {
            if (result.status) {
                getTimerForm();
                yaCounter37527960.reachGoal('svazatsya');
                return true;
            } else {
                alert('Что-то пошло не так, попробуйте еще раз!!!');
            }
        },
        error: function (result) {
            alert('Что-то пошло не так, попробуйте еще раз!!!');
        }
    });
}

if (promotionOpenAll) {
    for (let i = 0; i < promotionOpenAll.length; i++) {
        let promotionOpen = promotionOpenAll[i];

        promotionOpen.addEventListener('click', function (e) {

            let data = {
                action: 'promotionForm'
            };

            $.ajax({
                dataType: "json",
                type: "POST",
                url: '/php/ajax.php',
                data: data,
                success: function (result) {
                    if (result.status) {
                        popupWrapper.innerHTML = result.html;
                        popup.classList.add('active');

                        $(document.querySelector('.promotion .form')).validate(
                            {
                                rules: {
                                    tel: "required",
                                    email: "required"
                                },
                                messages: {
                                    tel: "Введите ваш  Телефон",
                                    email: "Введите ваш Email"
                                },

                                submitHandler: function (form) {
                                    sendCallorderData(form);
                                },
                                invalidHandler: function (event, validator) {
                                    // debugger;
                                },
                                errorPlacement: function (error, element) {
                                    element[0].placeholder = error[0].innerText;
                                }
                            }
                        );

                    } else {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                },
                error: function (result) {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            });
        });
    }
}

if (pushOpenAll) {
    for (let i = 0; i < pushOpenAll.length; i++) {
        let pushOpen = pushOpenAll[i];

        pushOpen.addEventListener('click', function (e) {
            e.preventDefault();
            let data = $(this).closest('form').serialize();

            $.ajax({
                dataType: "json",
                type: "POST",
                url: '/php/ajax.php',
                data: data,
                success: function (result) {
                    if (result.status) {

                        popupWrapper.innerHTML = result.html;
                        popup.classList.add('active');

                        // $(document.querySelector('.callorder .form')).validate(
                        //     {
                        //         rules: {
                        //             name: "required",
                        //             tel: "required",
                        //             email: "required"
                        //         },
                        //         messages: {
                        //             name: "Введите ваше Имя",
                        //             tel: "Введите ваш  Телефон",
                        //             email: "Введите ваш Email"
                        //         },
                        //
                        //         submitHandler: function (form) {
                        //             getTimerForm();
                        //         },
                        //         invalidHandler: function (event, validator) {
                        //             // debugger;
                        //         },
                        //         errorPlacement: function (error, element) {
                        //             element[0].placeholder = error[0].innerText;
                        //         }
                        //     }
                        // );
                        popupWrapper.querySelector('.callorderOpen').addEventListener('click', function () {
                            let formId = this.dataset.formid || 1,
                                data = {
                                    action: 'callorderForm',
                                    formId: formId
                                };


                            $.ajax({
                                dataType: "json",
                                type: "POST",
                                url: '/php/ajax.php',
                                data: data,
                                success: function (result) {
                                    if (result.status) {

                                        popupWrapper.innerHTML = result.html;
                                        popup.classList.add('active');
                                        $(document.querySelector('.callorder .form')).validate(
                                            {
                                                rules: {
                                                    name: "required",
                                                    tel: "required",
                                                    email: "required"
                                                },
                                                messages: {
                                                    name: "Введите ваше Имя",
                                                    tel: "Введите ваш  Телефон",
                                                    email: "Введите ваш Email"
                                                },

                                                submitHandler: function (form) {
                                                    getTimerForm();
                                                },
                                                invalidHandler: function (event, validator) {
                                                    // debugger;
                                                },
                                                errorPlacement: function (error, element) {
                                                    element[0].placeholder = error[0].innerText;
                                                }
                                            }
                                        );

                                    } else {
                                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                                    }
                                },
                                error: function (result) {
                                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                                }
                            });
                        });

                    } else {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                },
                error: function (result) {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            });
        });
    }
}

function getTimerForm(formId) {

    formId = formId || 1;

    let data = {
        formId: formId,
        action: 'timerForm'
    };

    $.ajax({
        dataType: "json",
        type: "POST",
        url: '/php/ajax.php',
        data: data,
        success: function (result) {
            if (result.status) {

                popupWrapper.innerHTML = result.html;
                popup.classList.add('active');

                if (!result.timerOff) {
                    let timer = new Timer({
                        endTime: result.endTime,
                        timer: document.querySelector('.timer')
                    }).init();
                }

            } else {
                alert('Что-то пошло не так, попробуйте еще раз!!!');
            }
        },
        error: function (result) {
            alert('Что-то пошло не так, попробуйте еще раз!!!');
        }
    });
}

popup.addEventListener('click', function (e) {
    if (e.target.classList.contains('popup__wrapper') || e.target.classList.contains('popup__close-img')) {
        popup.classList.remove('active');
    }
});

document.addEventListener('keydown', function (e) {
    if (e.keyCode == 27) {
        popup.classList.remove('active');
    }
});

$('body').on('change', '.policy__checkbox', function (e) {
    let $this = $(this),
        form = $this.closest('form'),
        submit = form.find('[type=submit]');
    submit.toggleClass('disabled');
});

const tarifs = document.querySelectorAll('.host-tarifs__item');

if (tarifs) {
    for (let i = 0; i < tarifs.length; i++) {
        tarifs[i].addEventListener('click', function (e) {
            e.preventDefault();


            let data = {
                id: this.dataset.id,
                name: this.dataset.name,
                src: this.dataset.src,
                action: 'tarifForm'
            };

            $.ajax({
                dataType: "json",
                type: "POST",
                url: '/php/ajax.php',
                data: data,
                success: function (result) {
                    if (result.status) {
                        popupWrapper.innerHTML = result.html;
                        popup.classList.add('active');

                        $(document.querySelector('.hosting')).validate(
                            {
                                rules: {
                                    name: "required",
                                    tel: "required",
                                    email: "required"
                                },
                                messages: {
                                    name: "Введите ваше Имя",
                                    tel: "Введите ваш  Телефон",
                                    email: "Введите ваш Email"
                                },

                                submitHandler: function (form) {
                                    sendCallorderData(form);
                                },
                                invalidHandler: function (event, validator) {
                                    // debugger;
                                },
                                errorPlacement: function (error, element) {
                                    element[0].placeholder = error[0].innerText;
                                }
                            }
                        );


                    } else {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                },
                error: function (result) {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            });
        })
    }
}

// }());
$('.form').each(function (indx, elem) {
    $(elem).validate(
        {
            rules: {
                name: "required",
                tel: "required",
                email: "required"
            },
            messages: {
                name: "Введите ваше Имя",
                tel: "Введите ваш  Телефон",
                email: "Введите ваш Email"
            },

            submitHandler: function (form) {
                sendCallorderData(form);
                form.reset();
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        }
    );
});

$('.calc').validate(
    {
        rules: {
            name: "required",
            tel: "required",
            email: "required"
        },
        messages: {
            name: "Введите ваше Имя",
            tel: "Введите ваш  Телефон",
            email: "Введите ваш Email"
        },

        submitHandler: function (form) {
            let data = $(form).serialize();


            $.ajax({
                dataType: "json",
                type: "POST",
                url: '/php/ajax.php',
                data: data,
                success: function (result) {
                    if (result.status) {
                        form.reset();
                        getTimerForm();
                        yaCounter37527960.reachGoal('svazatsya');
                        return true;
                    } else {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                },
                error: function (result) {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            });

        },
        invalidHandler: function (event, validator) {
            // debugger;
        },
        errorPlacement: function (error, element) {
            element[0].placeholder = error[0].innerText;
            // debugger;
        }
    }
);

let smmForm = $('.smm-calc__form form');

if (smmForm.length > 0) {
    smmForm.validate().destroy();
    smmForm.validate(
        {
            rules: {
                name: "required",
                tel: "required"
            },
            messages: {
                name: "Введите ваше Имя",
                tel: "Введите ваш  Телефон"
            },

            submitHandler: function (form) {
                sendCallorderData(form);
                form.reset();
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        }
    );
}

let siteForm = $('.site-cost__form');

if (siteForm.length > 0) {
    siteForm.validate().destroy();
    siteForm.validate(
        {
            rules: {
                name: "required",
                tel: "required"
            },
            messages: {
                name: "Введите ваше Имя",
                tel: "Введите ваш  Телефон"
            },

            submitHandler: function (form) {

                // let data = $(form).serialize();
                let data = getFormData(form);

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: '/php/ajax.php',
                    data: data,
                    // cache: false,
                    contentType: false,
                    processData: false,
                    success: function (result) {
                        if (result.status) {
                            form.reset();
                            getTimerForm();
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        }
    );
}

function getFormData(form) {

    let $form = $(form),
        formData = new FormData();

    $.each($form.find('input, textarea, select').not('[type="select-one"]'), function (i, field) {
        let $field = $(field),
            type = field.type,
            name = field.name,
            value = '';
        
        if (type=='file') {
            value = field.files[0];
        } else {
            value = field.value;
        }
        formData.append(name, value);
    });

    return formData;
}

let testForm = $('.testing__form');

if (testForm.length > 0) {

    $('.testing__radio').on('click', function (e) {
        let $this = $(this),
            slide = $this.closest('.testing__slide'),
            nextButton = slide.find('.testing__slide-next'),
            submitButton = slide.find('.testing__slide-submit');
        nextButton.removeClass('disabled');
        submitButton.removeClass('disabled');
    });

    testForm.validate().destroy();
    testForm.validate(
        {
            rules: {
                name: "required",
                tel: "required"
            },
            messages: {
                name: "Введите ваше Имя",
                tel: "Введите ваш  Телефон"
            },

            submitHandler: function (form) {

                let data = $(form).serialize();

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: '/php/ajax.php',
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            popupWrapper.innerHTML = result.html;
                            popup.classList.add('active');
                            $('.testing__form2').validate(
                                {
                                    rules: {
                                        email: "required"
                                    },
                                    messages: {
                                        email: "Введите ваш Email"
                                    },

                                    submitHandler: function (form) {
                                        sendCallorderData(form);
                                    },
                                    invalidHandler: function (event, validator) {
                                        // debugger;
                                    },
                                    errorPlacement: function (error, element) {
                                        element[0].placeholder = error[0].innerText;
                                    }
                                }
                            );

                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        }
    );

}




function Timer(settings) {
    this.endTime = settings.endTime;
    this.timer = settings.timer;
    this.total = '';
    this.timer = {
        hours: {
            wrap: {
                ten: this.timer.querySelector('.timer__hour-ten .timer__wrap'),
                unit: this.timer.querySelector('.timer__hour-unit .timer__wrap')
            }
        },
        minutes: {
            wrap: {
                ten: this.timer.querySelector('.timer__minute-ten .timer__wrap'),
                unit: this.timer.querySelector('.timer__minute-unit .timer__wrap')
            }
        },
        seconds: {
            wrap: {
                ten: this.timer.querySelector('.timer__second-ten .timer__wrap'),
                unit: this.timer.querySelector('.timer__second-unit .timer__wrap')
            }
        }
    };

    let that = this;

    function getTimeRemaining() {
        let t = Date.parse(that.endTime) - Date.parse(new Date());
        let seconds = formatNumber(Math.floor((t / 1000) % 60)),
            minutes = formatNumber(Math.floor((t / 1000 / 60) % 60)),
            hours = formatNumber(Math.floor((t / (1000 * 60 * 60))));

        that.total = t;


        that.timer.seconds.time = {
            ten: parseInt(seconds.charAt(0)),
            unit: parseInt(seconds.charAt(1))
        };
        that.timer.minutes.time = {
            ten: parseInt(minutes.charAt(0)),
            unit: parseInt(minutes.charAt(1))
        };
        that.timer.hours.time = {
            ten: parseInt(hours.charAt(0)),
            unit: parseInt(hours.charAt(1))
        };
    }

    function formatNumber(num) {
        return new Intl.NumberFormat('ru-Ru', {minimumIntegerDigits: 2}).format(num)
    }

    function setTimer() {
        for(let key in that.timer) {
            let item = that.timer[key];

            item.wrap.ten.style.transform = 'translate3d(0,' + (item.time.ten*-100) + '%,0)';
            item.wrap.unit.style.transform = 'translate3d(0,' + (item.time.unit*-100) + '%,0)';
        }
    }

    this.init = function (e) {
        getTimeRemaining();
        setTimer();

        var timeInterval = setInterval(function(){
            getTimeRemaining(that.endTime);
            setTimer();
            if(that.total<=0){
                clearInterval(timeInterval);
            }
        },1000);
    }
}
function Clock(settings) {
    this.hour = settings.hour || 0;
    this.minute = settings.minute || 0;
    this.second = settings.second || 0;

    this.hourObj = settings.hourObj;
    this.minuteObj = settings.minuteObj;
    this.secondObj = settings.secondObj;
    
    let that = this,
        seconds = 60,
        minutes = 60,
        hours = 12;

    this.getTime = function () {
        let date = new Date();
        that.hour = date.getHours() % hours;
        that.minute = date.getMinutes();
        that.second = date.getSeconds();
    };

    function getPosition (val, devider) {
        return val/devider*360;
    };

    this.tick = function () {
        that.getTime();
        that.secondObj.style.transform = 'rotate(' + getPosition(that.second, seconds) + 'deg)';
        that.minuteObj.style.transform = 'rotate(' + getPosition(that.minute, minutes) + 'deg)';
        that.hourObj.style.transform = 'rotate(' + getPosition(that.hour, hours) + 'deg)';
    };

    this.start = function () {
        let intervalClock = setInterval(that.tick, 1000);
    }


}
function Graph(settings) {
    this.time = settings.time || 5000;
    this.graph = settings.graph;
    this.list = settings.list;

    let coords = [],
        that = this;

    this.setCoords = function () {
        for (let i = 0; i < this.list.length; i++) {
            let item = this.list[i],
                arrow = item.querySelector('.arrow__line'),
                offsetTop = arrow.getBoundingClientRect().top + pageYOffset;


            item.offsetGraph = offsetTop;

            coords.push(
                item
            );
        }

        coords.reverse();
    };

    this.checkItem = function () {
        if (coords.length) {
            let graphOffset = that.graph.getBoundingClientRect().top + pageYOffset,
                item = coords[0];
            if (graphOffset < item.offsetGraph) {
                item.classList.add('active');
                coords.shift();
            }
        }
    };

    this.animateGraph = function () {
        let height = parseInt(this.graph.style.height) || 0;
        interv = setInterval(function () {
            // debugger;
            if (height < 100) {
                height++;
                that.graph.style.height = height + '%';
                that.checkItem();
            } else {
                clearInterval(interv)
            }
        }, 70);

    };

    this.init = function () {
        that.setCoords();
        that.animateGraph();
    }
}


(function () {

    let confirm = document.querySelector('.banner-send__confirm');

    $('.banner-send__form').validate(
        {
            rules: {
                email: "required"
            },
            messages: {
                email: "Введите ваш Email"
            },
            submitHandler: function (form) {
                let data = $(form).serialize();

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: '/php/ajax.php',
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            typeConfirmText('Ожидайте новостей на указанную почту');
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });

            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
            }
        }
    );



    function typeConfirmText(text) {
        let textArr = text.split(''),
            count = 1;

        let confirmInterval = setInterval(function () {
            let symbols = text.slice(0,count);

            if (count<textArr.length+1) {
                confirm.innerText = symbols;
                count++;
            } else {
                clearInterval(confirmInterval);
            }

        }, 200)


    }


}());
window.onload = function () {
    // initialize swiper when document ready
    let swiperReviews = new Swiper('.rev__container', {
        // Optional parameters
        direction: 'vertical',
        loop: true,
        speed: 300,
        slidesPerView: 3,
        spaceBetween: 8,
        initialSlide: 1,
        centeredSlides: true,
        slideToClickedSlide: true,
        grabCursor: true,
        breakpoints: {
            // when window width is <= 767.99px
            767.99: {
                slidesPerView: 1
            },

        },
        on: {
            slideChange: function () {
                let index = this.activeIndex;


                for (let i = 0; i < this.slides.length; i++) {
                    this.slides[i].classList.add('inactive');
                }

                this.slides[index].classList.remove('inactive');

            },
        }
    });

    let devSwiper = new Swiper('.site-dev__container', {
        // Optional parameters
        direction: 'horizontal',
        loop: true,
        // Navigation arrows
        navigation: {
            nextEl: '.site-dev__next',
            prevEl: '.site-dev__prev',
        },
        on: {
            init: function () {
                setDevDesc(this.slides[this.activeIndex]);
            },
            slideChange: function (e) {
                setDevDesc(this.slides[this.activeIndex]);
            }
        }


    });

    function setDevDesc(slide) {
        let logoObj = document.querySelector('.site-dev__img');
        if (logoObj) {
            let descObj = document.querySelectorAll('.site-dev__desc-item')[0].querySelector('.site-dev__desc-val'),
                goalObj = document.querySelectorAll('.site-dev__desc-item')[1].querySelector('.site-dev__desc-val'),
                logo = slide.dataset.logo,
                desc = slide.dataset.desc,
                goal = slide.dataset.goal;

            logoObj.src = logo;
            descObj.innerText = desc;
            goalObj.innerText = goal;
        }
    }

    let seoCatsSwiper = new Swiper('.slider__container', {
        // Optional parameters
        direction: 'horizontal',
        slidesPerView: 3,
        spaceBetween: 2,
        grabCursor: true,
        scrollbar: {
            el: '.slider__scrollbar .swiper-scrollbar',
            dragSize: 'auto'
        },
        breakpoints: {
            // when window width is <= 320px
            479.99: {
                slidesPerView: 1,
                spaceBetween: 2
            },
            // when window width is <= 320px
            767.99: {
                slidesPerView: 1,
                spaceBetween: 2
            },
            // when window width is <= 320px
            991.99: {
                slidesPerView: 2,
                spaceBetween: 2
            },
            // when window width is <= 480px
            1439.99: {
                slidesPerView: 2,
                spaceBetween: 2
            },
            // when window width is <= 640px
            1899.99: {
                slidesPerView: 2,
                spaceBetween: 2
            }
        }
    });

    let slider2Swiper = new Swiper('.slider2__container', {
        // Optional parameters
        direction: 'horizontal',
        slidesPerView: 3,
        spaceBetween: 2,
        grabCursor: true,
        scrollbar: {
            el: '.slider2__scrollbar .swiper-scrollbar',
            dragSize: 'auto'
        },
        breakpoints: {
            // when window width is <= 320px
            479.99: {
                slidesPerView: 1,
                spaceBetween: 2
            },
            // when window width is <= 320px
            767.99: {
                slidesPerView: 1,
                spaceBetween: 2
            },
            // when window width is <= 320px
            991.99: {
                slidesPerView: 2,
                spaceBetween: 2
            },
            // when window width is <= 480px
            1439.99: {
                slidesPerView: 2,
                spaceBetween: 2
            },
            // when window width is <= 640px
            1899.99: {
                slidesPerView: 2,
                spaceBetween: 2
            }
        }
    });

    let portSliderSwiper = new Swiper('.port-slider__container', {
        // Optional parameters
        direction: 'horizontal',
        slidesPerView: 'auto',
        loop: true,
        spaceBetween: 20,
        pagination: {
            el: '.port-slider__pagination',
            type: 'fraction',
            renderFraction: function (currentClass, totalClass) {
                return '<span class="' + currentClass + '"></span>' +
                    '<span class="swiper-pagination-seporator"></span>' +
                    '<span class="' + totalClass + '"></span>';
            }
        },

        navigation: {
            nextEl: '.port-slider__next',
            prevEl: '.port-slider__prev',
        },
    });

    let articleSwiper = new Swiper('.art-desc__swiper', {
        // Optional parameters
        direction: 'horizontal',
        slidesPerView: 1,
        loop: true,
        navigation: {
            nextEl: '.art-desc__next',
            prevEl: '.art-desc__prev',
        }
    });

    let textSwiper = new Swiper('.text-desc__swiper', {
        // Optional parameters
        direction: 'horizontal',
        slidesPerView: 1,
        loop: true,
        navigation: {
            nextEl: '.text-desc__next',
            prevEl: '.text-desc__prev',
        }
    });

    let testingSwiper = new Swiper('.testing__swiper', {
        // Optional parameters
        direction: 'horizontal',
        slidesPerView: 1,
        simulateTouch: false,
        navigation: {
            nextEl: '.testing__slide-next',
            prevEl: '.testing__slide-prev',
        },
        pagination: {
            el: '.testing__pag .swiper-pagination',
            type: 'progressbar',
        },
        on: {
            init: function () {
                let activeIndex = this.activeIndex + 1,
                    allSlides = this.slides.length,
                    percents = document.querySelector('.testing__pag-percents');

                percents.innerHTML = (activeIndex / allSlides) * 100 + ' %';
                // debugger;
                // console.log('swiper initialized');
            },
            slideChange: function () {
                let activeIndex = this.activeIndex + 1,
                    allSlides = this.slides.length,
                    percents = document.querySelector('.testing__pag-percents');

                percents.innerHTML = Math.round((activeIndex / allSlides) * 100) + ' %';
            }
        },
    });

    let promoteSwiper = new Swiper('.promote-slider', {
        // Optional parameters
        direction: 'horizontal',
        // Navigation arrows
        navigation: {
            nextEl: '.promote-slider__next',
            prevEl: '.promote-slider__prev',
        },
        on: {
            init: function () {
            },
            slideChange: function (e) {
                // activePromoteSlide = this.slides[this.activeIndex];
                // resetPromoteSlides();
                // animateNumbersGraphs();
                let slide = this.slides[this.activeIndex],
                    numbers = slide.querySelector('.numbers'),
                    numbersObj = new NumbersCounting(numbers, {
                        item: '.number'
                    }),
                    graphs = {
                        graph1: slide.querySelector('.promote-result__graph-img1'),
                        graph2: slide.querySelector('.promote-result__graph-img2')
                    },
                    graphsObj = new Graphs(graphs);
                numbersObj.clearValues();
                graphsObj.clear();

                setTimeout(function () {
                    // graphsObj.animate();
                    numbersObj.animateNumbers();
                }, 10);



            }
        }
    });

    let swiperPromoteRecomendation = new Swiper('.promote-rec__container', {
        // Optional parameters
        direction: 'horizontal',
        loop: true,
        speed: 300,
        slidesPerView: 5,
        grabCursor: true,
        navigation: {
            nextEl: '.promote-rec__next',
            prevEl: '.promote-rec__prev',
        },
        breakpoints: {
            // when window width is <= 320px
            479.99: {
                slidesPerView: 2
            },
            // when window width is <= 320px
            767.99: {
                slidesPerView: 3
            }
        }

    });

    let swiperSmm = new Swiper('.smm-res__container', {
        // Optional parameters
        direction: 'horizontal',
        loop: true,
        speed: 300,
        slidesPerView: 1,
        grabCursor: true,
        navigation: {
            nextEl: '.smm-res__next',
            prevEl: '.smm-res__prev',
        }

    });
};

//# sourceMappingURL=main.min.js.map